/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SparkAPI;

import com.google.gson.Gson;
import database.MyDatabase;
import domain.StandardResponse;
import domain.StatusResponse;
import domain.User;
import service.JiraDataLoggingInterface;
import service.JiraDataLogging;
import service.UserService;
import service.UserServiceImp;

import java.sql.SQLException;

import static spark.Spark.delete;
import static spark.Spark.get;
import static spark.Spark.options;
import static spark.Spark.post;
import static spark.Spark.put;

public class App {
   
    
    public String getGreeting() {
        return "Hello World!";
    }


    public static void _main(String[] args) throws SQLException, ClassNotFoundException {
        System.out.println(new App().getGreeting());
        MyDatabase.dbTest();
        //JiraServiceImp.testSelectAll();

    }
    public static void main(String[] args) throws ClassNotFoundException {
        final UserService service = new UserServiceImp();
        final JiraDataLoggingInterface jiraService = new JiraDataLogging();
        get("/hello",(request, response)-> "Hello Word");
        
        get("/hello/:name",(request, response)->{
            
            return "Hello, "+request.params(":name");
                
        });
        
        post("/users", (request, response) -> {
            response.type("application/json");

            User user = new Gson().fromJson(request.body(), User.class);
            service.addUser(user);

            return new Gson().toJson(new StandardResponse(StatusResponse.SUCCESS));
        });

        get("/users", (request, response) -> {
            response.type("application/json");

            return new Gson().toJson(
                    new StandardResponse(StatusResponse.SUCCESS, 
                    new Gson().toJsonTree(service.getUsers()))
            );
        });

        get("/users/:id", (request, response) -> {
            response.type("application/json");
            int id = Integer.parseInt(request.params(":id"));
            return new Gson().toJson(
                    new StandardResponse(StatusResponse.SUCCESS, 
                            new Gson().toJsonTree(service.getUser(id))));
        });
        
        put("/users/:id", (request, response) -> {
            response.type("application/json");

            User toEdit = new Gson().fromJson(request.body(), User.class);
            User editedUser = service.editUser(toEdit);

            if (editedUser != null) {
                return new Gson().toJson(
                        new StandardResponse(StatusResponse.SUCCESS, 
                                new Gson().toJsonTree(editedUser)));
            } else {
                return new Gson().toJson(
                        new StandardResponse(StatusResponse.ERROR, 
                                new Gson().toJson("User not found or error in edit")));
            }
        });
        
        delete("/users/:id", (request, response) -> {
            response.type("application/json");
            int id = Integer.parseInt(request.params(":id"));
            service.deleteUser(id);
            return new Gson().toJson(new StandardResponse(StatusResponse.SUCCESS, "user deleted"));
        });

        options("/users/:id", (request, response) -> {
            response.type("application/json");
            int id = Integer.parseInt(request.params(":id"));
            return new Gson().toJson(
                    new StandardResponse(StatusResponse.SUCCESS, 
                            (service.userExist(id)) ? "User exists" : "User does not exists"));
        });

        get("/jira/services", (request, response)->{
            return null;
        });
         post("/jira/services", (request, response)->{

             return null;
         });

        delete("/jira/services/:id", (request, response)->{

            return null;
        });

        put("/jira/services/:id",(request, response)->{

            return null;
        });

        //System.out.println(new App().getGreeting());
    }
}
